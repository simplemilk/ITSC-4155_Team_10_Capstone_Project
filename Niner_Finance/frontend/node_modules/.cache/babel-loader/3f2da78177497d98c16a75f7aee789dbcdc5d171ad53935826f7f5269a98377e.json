{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanpark/Documents/GitHub/ITSC-4155_Team_10_Capstone_Project/Niner_Finance/frontend/src/pages/Categories.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Categories.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Categories() {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [type, setType] = useState('expense');\n  const [category, setCategory] = useState('');\n  const [amount, setAmount] = useState('');\n  const [date, setDate] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Fetch categories for dropdown\n  useEffect(() => {\n    fetch('http://localhost:5000/api/categories').then(res => res.json()).then(data => setCategories(data)).catch(() => setError('Failed to load categories.'));\n  }, []);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n    if (!type || !category || !amount || !date) {\n      setError('Please fill in all fields.');\n      return;\n    }\n    try {\n      const res = await fetch('/api/categories', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          type,\n          category,\n          amount: parseFloat(amount),\n          date\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setSuccess('Transaction saved!');\n        setType('expense');\n        setCategory('');\n        setAmount('');\n        setDate('');\n      } else {\n        setError(data.error || 'Failed to save transaction.');\n      }\n    } catch {\n      setError('Failed to save transaction.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"categories-root\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'green'\n      },\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: type,\n          onChange: e => setType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"income\",\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"expense\",\n            children: \"Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Category:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: category,\n          onChange: e => setCategory(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Category --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: cat.name,\n            children: cat.name\n          }, cat.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: amount,\n          onChange: e => setAmount(e.target.value),\n          min: \"0\",\n          step: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Categories, \"fLpr0GsVPMjB/0N/nkQ1xNIprcE=\");\n_c = Categories;\nvar _c;\n$RefreshReg$(_c, \"Categories\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Categories","_s","categories","setCategories","type","setType","category","setCategory","amount","setAmount","date","setDate","error","setError","success","setSuccess","fetch","then","res","json","data","catch","handleSubmit","e","preventDefault","method","headers","body","JSON","stringify","parseFloat","ok","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","value","onChange","target","map","cat","name","id","min","step","required","_c","$RefreshReg$"],"sources":["/Users/jonathanpark/Documents/GitHub/ITSC-4155_Team_10_Capstone_Project/Niner_Finance/frontend/src/pages/Categories.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Categories.css';\n\nexport default function Categories() {\n  const [categories, setCategories] = useState([]);\n  const [type, setType] = useState('expense');\n  const [category, setCategory] = useState('');\n  const [amount, setAmount] = useState('');\n  const [date, setDate] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n\n  // Fetch categories for dropdown\n  useEffect(() => {\n    fetch('http://localhost:5000/api/categories')\n      .then(res => res.json())\n      .then(data => setCategories(data))\n      .catch(() => setError('Failed to load categories.'));\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n    if (!type || !category || !amount || !date) {\n      setError('Please fill in all fields.');\n      return;\n    }\n    try {\n      const res = await fetch('/api/categories', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          type,\n          category,\n          amount: parseFloat(amount),\n          date\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setSuccess('Transaction saved!');\n        setType('expense');\n        setCategory('');\n        setAmount('');\n        setDate('');\n      } else {\n        setError(data.error || 'Failed to save transaction.');\n      }\n    } catch {\n      setError('Failed to save transaction.');\n    }\n  };\n\n  return (\n    <div className=\"categories-root\">\n      <h1>Add Transaction</h1>\n      {error && <div className=\"error\">{error}</div>}\n      {success && <div style={{ color: 'green' }}>{success}</div>}\n      <form onSubmit={handleSubmit}>\n        <label>\n          Type:\n          <select value={type} onChange={e => setType(e.target.value)}>\n            <option value=\"income\">Income</option>\n            <option value=\"expense\">Expense</option>\n          </select>\n        </label>\n        <label>\n          Category:\n          <select value={category} onChange={e => setCategory(e.target.value)}>\n            <option value=\"\">-- Select Category --</option>\n            {categories.map(cat => (\n              <option key={cat.id} value={cat.name}>{cat.name}</option>\n            ))}\n          </select>\n        </label>\n        <label>\n          Amount:\n          <input\n            type=\"number\"\n            value={amount}\n            onChange={e => setAmount(e.target.value)}\n            min=\"0\"\n            step=\"0.01\"\n            required\n          />\n        </label>\n        <label>\n          Date:\n          <input\n            type=\"date\"\n            value={date}\n            onChange={e => setDate(e.target.value)}\n            required\n          />\n        </label>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,SAAS,CAAC;EAC3C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACdoB,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIjB,aAAa,CAACiB,IAAI,CAAC,CAAC,CACjCC,KAAK,CAAC,MAAMR,QAAQ,CAAC,4BAA4B,CAAC,CAAC;EACxD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBX,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IACd,IAAI,CAACX,IAAI,IAAI,CAACE,QAAQ,IAAI,CAACE,MAAM,IAAI,CAACE,IAAI,EAAE;MAC1CG,QAAQ,CAAC,4BAA4B,CAAC;MACtC;IACF;IACA,IAAI;MACF,MAAMK,GAAG,GAAG,MAAMF,KAAK,CAAC,iBAAiB,EAAE;QACzCS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBzB,IAAI;UACJE,QAAQ;UACRE,MAAM,EAAEsB,UAAU,CAACtB,MAAM,CAAC;UAC1BE;QACF,CAAC;MACH,CAAC,CAAC;MACF,MAAMU,IAAI,GAAG,MAAMF,GAAG,CAACC,IAAI,CAAC,CAAC;MAC7B,IAAID,GAAG,CAACa,EAAE,EAAE;QACVhB,UAAU,CAAC,oBAAoB,CAAC;QAChCV,OAAO,CAAC,SAAS,CAAC;QAClBE,WAAW,CAAC,EAAE,CAAC;QACfE,SAAS,CAAC,EAAE,CAAC;QACbE,OAAO,CAAC,EAAE,CAAC;MACb,CAAC,MAAM;QACLE,QAAQ,CAACO,IAAI,CAACR,KAAK,IAAI,6BAA6B,CAAC;MACvD;IACF,CAAC,CAAC,MAAM;MACNC,QAAQ,CAAC,6BAA6B,CAAC;IACzC;EACF,CAAC;EAED,oBACEd,OAAA;IAAKiC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BlC,OAAA;MAAAkC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBzB,KAAK,iBAAIb,OAAA;MAAKiC,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAErB;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAC7CvB,OAAO,iBAAIf,OAAA;MAAKuC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAN,QAAA,EAAEnB;IAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3DtC,OAAA;MAAMyC,QAAQ,EAAElB,YAAa;MAAAW,QAAA,gBAC3BlC,OAAA;QAAAkC,QAAA,GAAO,OAEL,eAAAlC,OAAA;UAAQ0C,KAAK,EAAErC,IAAK;UAACsC,QAAQ,EAAEnB,CAAC,IAAIlB,OAAO,CAACkB,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;UAAAR,QAAA,gBAC1DlC,OAAA;YAAQ0C,KAAK,EAAC,QAAQ;YAAAR,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtCtC,OAAA;YAAQ0C,KAAK,EAAC,SAAS;YAAAR,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACRtC,OAAA;QAAAkC,QAAA,GAAO,WAEL,eAAAlC,OAAA;UAAQ0C,KAAK,EAAEnC,QAAS;UAACoC,QAAQ,EAAEnB,CAAC,IAAIhB,WAAW,CAACgB,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;UAAAR,QAAA,gBAClElC,OAAA;YAAQ0C,KAAK,EAAC,EAAE;YAAAR,QAAA,EAAC;UAAqB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EAC9CnC,UAAU,CAAC0C,GAAG,CAACC,GAAG,iBACjB9C,OAAA;YAAqB0C,KAAK,EAAEI,GAAG,CAACC,IAAK;YAAAb,QAAA,EAAEY,GAAG,CAACC;UAAI,GAAlCD,GAAG,CAACE,EAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqC,CACzD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACRtC,OAAA;QAAAkC,QAAA,GAAO,SAEL,eAAAlC,OAAA;UACEK,IAAI,EAAC,QAAQ;UACbqC,KAAK,EAAEjC,MAAO;UACdkC,QAAQ,EAAEnB,CAAC,IAAId,SAAS,CAACc,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;UACzCO,GAAG,EAAC,GAAG;UACPC,IAAI,EAAC,MAAM;UACXC,QAAQ;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRtC,OAAA;QAAAkC,QAAA,GAAO,OAEL,eAAAlC,OAAA;UACEK,IAAI,EAAC,MAAM;UACXqC,KAAK,EAAE/B,IAAK;UACZgC,QAAQ,EAAEnB,CAAC,IAAIZ,OAAO,CAACY,CAAC,CAACoB,MAAM,CAACF,KAAK,CAAE;UACvCS,QAAQ;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACRtC,OAAA;QAAQK,IAAI,EAAC,QAAQ;QAAA6B,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACpC,EAAA,CAjGuBD,UAAU;AAAAmD,EAAA,GAAVnD,UAAU;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}