{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nfunction ResetPasswordPage() {\n  _s();\n  var _location$state, _location$state2;\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n  const email = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email;\n  const favoriteColor = (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.favoriteColor; // Get favoriteColor from navigation state\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('');\n    if (newPassword !== confirmPassword) {\n      setMessage('Passwords do not match.');\n      return;\n    }\n    if (newPassword.length < 6) {\n      setMessage('Password must be at least 6 characters long.');\n      return;\n    }\n    if (!email || !favoriteColor) {\n      setMessage('Session expired. Please restart the password reset process.');\n      return;\n    }\n    try {\n      const res = await fetch('http://localhost:4000/api/reset-password-security', {\n        // Fixed port\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          favoriteColor,\n          newPassword\n        }) // Include favoriteColor\n      });\n      const data = await res.json();\n      setMessage(data.message || 'Password has been reset.');\n      if (data.success) {\n        setTimeout(() => navigate('/login'), 2000);\n      }\n    } catch (err) {\n      console.error('Error resetting password:', err);\n      setMessage('Error resetting password.');\n    }\n  };\n\n  // Rest of component...\n}\n_s(ResetPasswordPage, \"ZtlYyAggmF9qcAaNas8QljchP6w=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ResetPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"names":["React","useState","useNavigate","useLocation","ResetPasswordPage","_s","_location$state","_location$state2","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","navigate","location","email","state","favoriteColor","handleSubmit","e","preventDefault","length","res","fetch","method","headers","body","JSON","stringify","data","json","success","setTimeout","err","console","error","_c","$RefreshReg$"],"sources":["/Users/jonathanpark/Documents/GitHub/ITSC-4155_Team_10_Capstone_Project/Niner_Finance/frontend/src/pages/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nfunction ResetPasswordPage() {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n  const email = location.state?.email;\n  const favoriteColor = location.state?.favoriteColor; // Get favoriteColor from navigation state\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setMessage('');\n\n    if (newPassword !== confirmPassword) {\n      setMessage('Passwords do not match.');\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      setMessage('Password must be at least 6 characters long.');\n      return;\n    }\n\n    if (!email || !favoriteColor) {\n      setMessage('Session expired. Please restart the password reset process.');\n      return;\n    }\n\n    try {\n      const res = await fetch('http://localhost:4000/api/reset-password-security', { // Fixed port\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, favoriteColor, newPassword }), // Include favoriteColor\n      });\n      const data = await res.json();\n      setMessage(data.message || 'Password has been reset.');\n      \n      if (data.success) {\n        setTimeout(() => navigate('/login'), 2000);\n      }\n    } catch (err) {\n      console.error('Error resetting password:', err);\n      setMessage('Error resetting password.');\n    }\n  };\n\n  // Rest of component...\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,KAAK,IAAAV,eAAA,GAAGS,QAAQ,CAACE,KAAK,cAAAX,eAAA,uBAAdA,eAAA,CAAgBU,KAAK;EACnC,MAAME,aAAa,IAAAX,gBAAA,GAAGQ,QAAQ,CAACE,KAAK,cAAAV,gBAAA,uBAAdA,gBAAA,CAAgBW,aAAa,CAAC,CAAC;;EAErD,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBR,UAAU,CAAC,EAAE,CAAC;IAEd,IAAIL,WAAW,KAAKE,eAAe,EAAE;MACnCG,UAAU,CAAC,yBAAyB,CAAC;MACrC;IACF;IAEA,IAAIL,WAAW,CAACc,MAAM,GAAG,CAAC,EAAE;MAC1BT,UAAU,CAAC,8CAA8C,CAAC;MAC1D;IACF;IAEA,IAAI,CAACG,KAAK,IAAI,CAACE,aAAa,EAAE;MAC5BL,UAAU,CAAC,6DAA6D,CAAC;MACzE;IACF;IAEA,IAAI;MACF,MAAMU,GAAG,GAAG,MAAMC,KAAK,CAAC,mDAAmD,EAAE;QAAE;QAC7EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb,KAAK;UAAEE,aAAa;UAAEV;QAAY,CAAC,CAAC,CAAE;MAC/D,CAAC,CAAC;MACF,MAAMsB,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;MAC7BlB,UAAU,CAACiB,IAAI,CAAClB,OAAO,IAAI,0BAA0B,CAAC;MAEtD,IAAIkB,IAAI,CAACE,OAAO,EAAE;QAChBC,UAAU,CAAC,MAAMnB,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOoB,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAAC;MAC/CrB,UAAU,CAAC,2BAA2B,CAAC;IACzC;EACF,CAAC;;EAED;AACF;AAACR,EAAA,CA/CQD,iBAAiB;EAAA,QAIPF,WAAW,EACXC,WAAW;AAAA;AAAAkC,EAAA,GALrBjC,iBAAiB;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}